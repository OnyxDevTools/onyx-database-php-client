<?php
/**
 * PersistenceManagerApi
 * PHP version 5
 *
 * @category Class
 * @package  Onyx\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Onyx\Client\Api;

use \Onyx\Client\Configuration;
use \Onyx\Client\ApiClient;
use \Onyx\Client\ApiException;
use \Onyx\Client\ObjectSerializer;

/**
 * PersistenceManagerApi Class Doc Comment
 *
 * @category Class
 * @package  Onyx\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PersistenceManagerApi
{

    /**
     * API Client
     * @var \Onyx\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Onyx\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://localhost:8080/web');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Onyx\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Onyx\Client\ApiClient $apiClient set the API client
     * @return PersistenceManagerApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * batchDeletePost
     *
     * Bulk Delete Managed Entities
     *
     * @param \Onyx\Client\Model\EntityListRequestBody $entity Save Entities Request (required)
     * @return void
     * @throws \Onyx\Client\ApiException on non-2xx response
     */
    public function batchDeletePost($entity)
    {
        
        // verify the required parameter 'entity' is set
        if ($entity === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity when calling batchDeletePost');
        }
  
        // parse inputs
        $resourcePath = "/batchDelete";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($entity)) {
            $_tempBody = $entity;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 0:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onyx\Client\Model\EntityException', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
    }
    
    /**
     * batchSavePost
     *
     * Bulk Save Managed Entities
     *
     * @param \Onyx\Client\Model\EntityListRequestBody $entity Save Entities Request (required)
     * @return void
     * @throws \Onyx\Client\ApiException on non-2xx response
     */
    public function batchSavePost($entity)
    {
        
        // verify the required parameter 'entity' is set
        if ($entity === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity when calling batchSavePost');
        }
  
        // parse inputs
        $resourcePath = "/batchSave";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($entity)) {
            $_tempBody = $entity;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 0:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onyx\Client\Model\EntityException', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
    }
    
    /**
     * deleteEntityPost
     *
     * Delete Managed Entity
     *
     * @param \Onyx\Client\Model\EntityRequestBody $entity Managed Entity Request Object (required)
     * @return bool
     * @throws \Onyx\Client\ApiException on non-2xx response
     */
    public function deleteEntityPost($entity)
    {
        
        // verify the required parameter 'entity' is set
        if ($entity === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity when calling deleteEntityPost');
        }
  
        // parse inputs
        $resourcePath = "/deleteEntity";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($entity)) {
            $_tempBody = $entity;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'bool'
            );
            
            if (!$response) {
                return null;
            }

            return $this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 0:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onyx\Client\Model\EntityException', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        return null;
        
    }
    
    /**
     * executePost
     *
     * Execute Query
     *
     * @param \Onyx\Client\Model\EntityQueryBody $query Query defined with criteria (required)
     * @return object
     * @throws \Onyx\Client\ApiException on non-2xx response
     */
    public function executePost($query)
    {
        
        // verify the required parameter 'query' is set
        if ($query === null) {
            throw new \InvalidArgumentException('Missing the required parameter $query when calling executePost');
        }
  
        // parse inputs
        $resourcePath = "/execute";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($query)) {
            $_tempBody = $query;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'object'
            );
            
            if (!$response) {
                return null;
            }

            return $this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 0:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onyx\Client\Model\EntityException', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        return null;
        
    }
    
    /**
     * executeDeletePost
     *
     * Execute Delete Query
     *
     * @param \Onyx\Client\Model\EntityQueryBody $query Query defined with criteria (required)
     * @return bool
     * @throws \Onyx\Client\ApiException on non-2xx response
     */
    public function executeDeletePost($query)
    {
        
        // verify the required parameter 'query' is set
        if ($query === null) {
            throw new \InvalidArgumentException('Missing the required parameter $query when calling executeDeletePost');
        }
  
        // parse inputs
        $resourcePath = "/executeDelete";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($query)) {
            $_tempBody = $query;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'bool'
            );
            
            if (!$response) {
                return null;
            }

            return $this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 0:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onyx\Client\Model\EntityException', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        return null;
        
    }
    
    /**
     * executeUpdatePost
     *
     * Execute Update Query
     *
     * @param \Onyx\Client\Model\EntityQueryBody $query Query defined with criteria and update instructions (required)
     * @return bool
     * @throws \Onyx\Client\ApiException on non-2xx response
     */
    public function executeUpdatePost($query)
    {
        
        // verify the required parameter 'query' is set
        if ($query === null) {
            throw new \InvalidArgumentException('Missing the required parameter $query when calling executeUpdatePost');
        }
  
        // parse inputs
        $resourcePath = "/executeUpdate";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($query)) {
            $_tempBody = $query;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'bool'
            );
            
            if (!$response) {
                return null;
            }

            return $this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 0:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onyx\Client\Model\EntityException', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        return null;
        
    }
    
    /**
     * existsPost
     *
     * Managed Entity by Primary Key exists
     *
     * @param \Onyx\Client\Model\EntityFindRequestBody $entity Managed Entity Request Object (required)
     * @return bool
     * @throws \Onyx\Client\ApiException on non-2xx response
     */
    public function existsPost($entity)
    {
        
        // verify the required parameter 'entity' is set
        if ($entity === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity when calling existsPost');
        }
  
        // parse inputs
        $resourcePath = "/exists";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($entity)) {
            $_tempBody = $entity;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'bool'
            );
            
            if (!$response) {
                return null;
            }

            return $this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 0:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onyx\Client\Model\EntityException', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        return null;
        
    }
    
    /**
     * findPost
     *
     * Find Managed Entity by Primary Key
     *
     * @param \Onyx\Client\Model\EntityFindRequestBody $entity Managed Entity Request Object (required)
     * @return object
     * @throws \Onyx\Client\ApiException on non-2xx response
     */
    public function findPost($entity)
    {
        
        // verify the required parameter 'entity' is set
        if ($entity === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity when calling findPost');
        }
  
        // parse inputs
        $resourcePath = "/find";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($entity)) {
            $_tempBody = $entity;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'object'
            );
            
            if (!$response) {
                return null;
            }

            return $this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 0:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onyx\Client\Model\NoResultsException', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        return null;
        
    }
    
    /**
     * findByReferenceIdPost
     *
     * Find Managed Entity by Reference ID
     *
     * @param \Onyx\Client\Model\EntityIDRequestBody $entity Managed Entity Request Object (required)
     * @return object
     * @throws \Onyx\Client\ApiException on non-2xx response
     */
    public function findByReferenceIdPost($entity)
    {
        
        // verify the required parameter 'entity' is set
        if ($entity === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity when calling findByReferenceIdPost');
        }
  
        // parse inputs
        $resourcePath = "/findByReferenceId";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($entity)) {
            $_tempBody = $entity;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'object'
            );
            
            if (!$response) {
                return null;
            }

            return $this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 0:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onyx\Client\Model\NoResultsException', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        return null;
        
    }
    
    /**
     * findWithPartitionIdPost
     *
     * Find Managed Entity by Primary Key and Partition ID
     *
     * @param \Onyx\Client\Model\EntityFindRequestBody $entity Managed Entity Request Object (required)
     * @return object
     * @throws \Onyx\Client\ApiException on non-2xx response
     */
    public function findWithPartitionIdPost($entity)
    {
        
        // verify the required parameter 'entity' is set
        if ($entity === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity when calling findWithPartitionIdPost');
        }
  
        // parse inputs
        $resourcePath = "/findWithPartitionId";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($entity)) {
            $_tempBody = $entity;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'object'
            );
            
            if (!$response) {
                return null;
            }

            return $this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 0:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onyx\Client\Model\NoResultsException', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        return null;
        
    }
    
    /**
     * initializePost
     *
     * Initialize Managed Entity's relationship by attribute name
     *
     * @param \Onyx\Client\Model\EntityInitializeBody $entity Initilize Relationship Request (required)
     * @return object[]
     * @throws \Onyx\Client\ApiException on non-2xx response
     */
    public function initializePost($entity)
    {
        
        // verify the required parameter 'entity' is set
        if ($entity === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity when calling initializePost');
        }
  
        // parse inputs
        $resourcePath = "/initialize";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($entity)) {
            $_tempBody = $entity;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'object[]'
            );
            
            if (!$response) {
                return null;
            }

            return $this->apiClient->getSerializer()->deserialize($response, 'object[]', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 0:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onyx\Client\Model\EntityException', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        return null;
        
    }
    
    /**
     * saveEntityPost
     *
     * Save Managed Entity
     *
     * @param \Onyx\Client\Model\EntityRequestBody $entity Managed Entity Request Object (required)
     * @return object
     * @throws \Onyx\Client\ApiException on non-2xx response
     */
    public function saveEntityPost($entity)
    {
        
        // verify the required parameter 'entity' is set
        if ($entity === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity when calling saveEntityPost');
        }
  
        // parse inputs
        $resourcePath = "/saveEntity";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($entity)) {
            $_tempBody = $entity;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'object'
            );
            
            if (!$response) {
                return null;
            }

            return $this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 0:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onyx\Client\Model\EntityException', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        return null;
        
    }
    
    /**
     * saveRelationshipsPost
     *
     * Bulk Save Relationships
     *
     * @param \Onyx\Client\Model\SaveRelationshipRequestBody $entity Save Relationships Request (required)
     * @return object[]
     * @throws \Onyx\Client\ApiException on non-2xx response
     */
    public function saveRelationshipsPost($entity)
    {
        
        // verify the required parameter 'entity' is set
        if ($entity === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity when calling saveRelationshipsPost');
        }
  
        // parse inputs
        $resourcePath = "/saveRelationships";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($entity)) {
            $_tempBody = $entity;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'object[]'
            );
            
            if (!$response) {
                return null;
            }

            return $this->apiClient->getSerializer()->deserialize($response, 'object[]', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 0:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onyx\Client\Model\EntityException', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        return null;
        
    }
    
}
