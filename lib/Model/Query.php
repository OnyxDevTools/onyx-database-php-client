<?php
/**
 * Query
 *
 * PHP version 5
 *
 * @category Class
 * @package  Onyx\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Onyx\Client\Model;

use \ArrayAccess;
/**
 * Query Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Onyx\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Query implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'entity_type' => 'string',
        'first_row' => 'int',
        'max_results' => 'int',
        'results_count' => 'int',
        'partition' => 'string',
        'selections' => 'string',
        'updates' => '\Onyx\Client\Model\AttributeUpdate[]',
        'criteria' => 'object',
        'query_orders' => '\Onyx\Client\Model\QueryOrder[]'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'entity_type' => 'entityType',
        'first_row' => 'firstRow',
        'max_results' => 'maxResults',
        'results_count' => 'resultsCount',
        'partition' => 'partition',
        'selections' => 'selections',
        'updates' => 'updates',
        'criteria' => 'criteria',
        'query_orders' => 'queryOrders'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'entity_type' => 'setEntityType',
        'first_row' => 'setFirstRow',
        'max_results' => 'setMaxResults',
        'results_count' => 'setResultsCount',
        'partition' => 'setPartition',
        'selections' => 'setSelections',
        'updates' => 'setUpdates',
        'criteria' => 'setCriteria',
        'query_orders' => 'setQueryOrders'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'entity_type' => 'getEntityType',
        'first_row' => 'getFirstRow',
        'max_results' => 'getMaxResults',
        'results_count' => 'getResultsCount',
        'partition' => 'getPartition',
        'selections' => 'getSelections',
        'updates' => 'getUpdates',
        'criteria' => 'getCriteria',
        'query_orders' => 'getQueryOrders'
    );
  
    
    /**
      * $entity_type 
      * @var string
      */
    protected $entity_type;
    
    /**
      * $first_row 
      * @var int
      */
    protected $first_row;
    
    /**
      * $max_results 
      * @var int
      */
    protected $max_results;
    
    /**
      * $results_count 
      * @var int
      */
    protected $results_count;
    
    /**
      * $partition 
      * @var string
      */
    protected $partition;
    
    /**
      * $selections 
      * @var string
      */
    protected $selections;
    
    /**
      * $updates 
      * @var \Onyx\Client\Model\AttributeUpdate[]
      */
    protected $updates;
    
    /**
      * $criteria 
      * @var object
      */
    protected $criteria;
    
    /**
      * $query_orders 
      * @var \Onyx\Client\Model\QueryOrder[]
      */
    protected $query_orders;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->entity_type = $data["entity_type"];
            $this->first_row = $data["first_row"];
            $this->max_results = $data["max_results"];
            $this->results_count = $data["results_count"];
            $this->partition = $data["partition"];
            $this->selections = $data["selections"];
            $this->updates = $data["updates"];
            $this->criteria = $data["criteria"];
            $this->query_orders = $data["query_orders"];
        }
    }
    
    /**
     * Gets entity_type
     * @return string
     */
    public function getEntityType()
    {
        return $this->entity_type;
    }
  
    /**
     * Sets entity_type
     * @param string $entity_type 
     * @return $this
     */
    public function setEntityType($entity_type)
    {
        
        $this->entity_type = $entity_type;
        return $this;
    }
    
    /**
     * Gets first_row
     * @return int
     */
    public function getFirstRow()
    {
        return $this->first_row;
    }
  
    /**
     * Sets first_row
     * @param int $first_row 
     * @return $this
     */
    public function setFirstRow($first_row)
    {
        
        $this->first_row = $first_row;
        return $this;
    }
    
    /**
     * Gets max_results
     * @return int
     */
    public function getMaxResults()
    {
        return $this->max_results;
    }
  
    /**
     * Sets max_results
     * @param int $max_results 
     * @return $this
     */
    public function setMaxResults($max_results)
    {
        
        $this->max_results = $max_results;
        return $this;
    }
    
    /**
     * Gets results_count
     * @return int
     */
    public function getResultsCount()
    {
        return $this->results_count;
    }
  
    /**
     * Sets results_count
     * @param int $results_count 
     * @return $this
     */
    public function setResultsCount($results_count)
    {
        
        $this->results_count = $results_count;
        return $this;
    }
    
    /**
     * Gets partition
     * @return string
     */
    public function getPartition()
    {
        return $this->partition;
    }
  
    /**
     * Sets partition
     * @param string $partition 
     * @return $this
     */
    public function setPartition($partition)
    {
        
        $this->partition = $partition;
        return $this;
    }
    
    /**
     * Gets selections
     * @return string
     */
    public function getSelections()
    {
        return $this->selections;
    }
  
    /**
     * Sets selections
     * @param string $selections 
     * @return $this
     */
    public function setSelections($selections)
    {
        
        $this->selections = $selections;
        return $this;
    }
    
    /**
     * Gets updates
     * @return \Onyx\Client\Model\AttributeUpdate[]
     */
    public function getUpdates()
    {
        return $this->updates;
    }
  
    /**
     * Sets updates
     * @param \Onyx\Client\Model\AttributeUpdate[] $updates 
     * @return $this
     */
    public function setUpdates($updates)
    {
        
        $this->updates = $updates;
        return $this;
    }
    
    /**
     * Gets criteria
     * @return object
     */
    public function getCriteria()
    {
        return $this->criteria;
    }
  
    /**
     * Sets criteria
     * @param object $criteria 
     * @return $this
     */
    public function setCriteria($criteria)
    {
        
        $this->criteria = $criteria;
        return $this;
    }
    
    /**
     * Gets query_orders
     * @return \Onyx\Client\Model\QueryOrder[]
     */
    public function getQueryOrders()
    {
        return $this->query_orders;
    }
  
    /**
     * Sets query_orders
     * @param \Onyx\Client\Model\QueryOrder[] $query_orders 
     * @return $this
     */
    public function setQueryOrders($query_orders)
    {
        
        $this->query_orders = $query_orders;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
