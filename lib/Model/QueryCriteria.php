<?php
/**
 * QueryCriteria
 *
 * PHP version 5
 *
 * @category Class
 * @package  Onyx\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Onyx\Client\Model;

use \ArrayAccess;
/**
 * QueryCriteria Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Onyx\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class QueryCriteria implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'attribute' => 'string',
        'operator' => 'string',
        'type' => 'string',
        'date_value' => '\DateTime',
        'long_value' => 'int',
        'integer_value' => 'int',
        'boolean_value' => 'bool',
        'double_value' => 'double',
        'string_value' => 'string',
        'date_value_list' => '\DateTime[]',
        'long_value_list' => 'int[]',
        'integer_value_list' => 'int[]',
        'double_value_list' => 'double[]',
        'string_value_list' => 'string[]',
        'and_criteria' => '\Onyx\Client\Model\QueryCriteria[]',
        'or_criteria' => '\Onyx\Client\Model\QueryCriteria[]'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'attribute' => 'attribute',
        'operator' => 'operator',
        'type' => 'type',
        'date_value' => 'dateValue',
        'long_value' => 'longValue',
        'integer_value' => 'integerValue',
        'boolean_value' => 'booleanValue',
        'double_value' => 'doubleValue',
        'string_value' => 'stringValue',
        'date_value_list' => 'dateValueList',
        'long_value_list' => 'longValueList',
        'integer_value_list' => 'integerValueList',
        'double_value_list' => 'doubleValueList',
        'string_value_list' => 'stringValueList',
        'and_criteria' => 'andCriteria',
        'or_criteria' => 'orCriteria'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'attribute' => 'setAttribute',
        'operator' => 'setOperator',
        'type' => 'setType',
        'date_value' => 'setDateValue',
        'long_value' => 'setLongValue',
        'integer_value' => 'setIntegerValue',
        'boolean_value' => 'setBooleanValue',
        'double_value' => 'setDoubleValue',
        'string_value' => 'setStringValue',
        'date_value_list' => 'setDateValueList',
        'long_value_list' => 'setLongValueList',
        'integer_value_list' => 'setIntegerValueList',
        'double_value_list' => 'setDoubleValueList',
        'string_value_list' => 'setStringValueList',
        'and_criteria' => 'setAndCriteria',
        'or_criteria' => 'setOrCriteria'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'attribute' => 'getAttribute',
        'operator' => 'getOperator',
        'type' => 'getType',
        'date_value' => 'getDateValue',
        'long_value' => 'getLongValue',
        'integer_value' => 'getIntegerValue',
        'boolean_value' => 'getBooleanValue',
        'double_value' => 'getDoubleValue',
        'string_value' => 'getStringValue',
        'date_value_list' => 'getDateValueList',
        'long_value_list' => 'getLongValueList',
        'integer_value_list' => 'getIntegerValueList',
        'double_value_list' => 'getDoubleValueList',
        'string_value_list' => 'getStringValueList',
        'and_criteria' => 'getAndCriteria',
        'or_criteria' => 'getOrCriteria'
    );
  
    
    /**
      * $attribute 
      * @var string
      */
    protected $attribute;
    
    /**
      * $operator 
      * @var string
      */
    protected $operator;
    
    /**
      * $type 
      * @var string
      */
    protected $type;
    
    /**
      * $date_value 
      * @var \DateTime
      */
    protected $date_value;
    
    /**
      * $long_value 
      * @var int
      */
    protected $long_value;
    
    /**
      * $integer_value 
      * @var int
      */
    protected $integer_value;
    
    /**
      * $boolean_value 
      * @var bool
      */
    protected $boolean_value;
    
    /**
      * $double_value 
      * @var double
      */
    protected $double_value;
    
    /**
      * $string_value 
      * @var string
      */
    protected $string_value;
    
    /**
      * $date_value_list 
      * @var \DateTime[]
      */
    protected $date_value_list;
    
    /**
      * $long_value_list 
      * @var int[]
      */
    protected $long_value_list;
    
    /**
      * $integer_value_list 
      * @var int[]
      */
    protected $integer_value_list;
    
    /**
      * $double_value_list 
      * @var double[]
      */
    protected $double_value_list;
    
    /**
      * $string_value_list 
      * @var string[]
      */
    protected $string_value_list;
    
    /**
      * $and_criteria 
      * @var \Onyx\Client\Model\QueryCriteria[]
      */
    protected $and_criteria;
    
    /**
      * $or_criteria 
      * @var \Onyx\Client\Model\QueryCriteria[]
      */
    protected $or_criteria;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->attribute = $data["attribute"];
            $this->operator = $data["operator"];
            $this->type = $data["type"];
            $this->date_value = $data["date_value"];
            $this->long_value = $data["long_value"];
            $this->integer_value = $data["integer_value"];
            $this->boolean_value = $data["boolean_value"];
            $this->double_value = $data["double_value"];
            $this->string_value = $data["string_value"];
            $this->date_value_list = $data["date_value_list"];
            $this->long_value_list = $data["long_value_list"];
            $this->integer_value_list = $data["integer_value_list"];
            $this->double_value_list = $data["double_value_list"];
            $this->string_value_list = $data["string_value_list"];
            $this->and_criteria = $data["and_criteria"];
            $this->or_criteria = $data["or_criteria"];
        }
    }
    
    /**
     * Gets attribute
     * @return string
     */
    public function getAttribute()
    {
        return $this->attribute;
    }
  
    /**
     * Sets attribute
     * @param string $attribute 
     * @return $this
     */
    public function setAttribute($attribute)
    {
        
        $this->attribute = $attribute;
        return $this;
    }
    
    /**
     * Gets operator
     * @return string
     */
    public function getOperator()
    {
        return $this->operator;
    }
  
    /**
     * Sets operator
     * @param string $operator 
     * @return $this
     */
    public function setOperator($operator)
    {
        $allowed_values = array("EQUAL", "NOT_EQUAL", "NOT_STARTS_WITH", "NOT_NULL", "STARTS_WITH", "CONTAINS", "LIKE", "MATCHES", "LESS_THAN", "GREATER_THAN", "LESS_THAN_EQUAL", "GREATER_THAN_EQUAL", "IN", "NOT_IN");
        if (!in_array($operator, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'operator', must be one of 'EQUAL', 'NOT_EQUAL', 'NOT_STARTS_WITH', 'NOT_NULL', 'STARTS_WITH', 'CONTAINS', 'LIKE', 'MATCHES', 'LESS_THAN', 'GREATER_THAN', 'LESS_THAN_EQUAL', 'GREATER_THAN_EQUAL', 'IN', 'NOT_IN'");
        }
        $this->operator = $operator;
        return $this;
    }
    
    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }
  
    /**
     * Sets type
     * @param string $type 
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array("STRING", "LONG", "DOUBLE", "DATE", "INTEGER", "BOOLEAN", "LIST_STRING", "LIST_LONG", "LIST_INTEGER", "LIST_DOUBLE", "LIST_DATE");
        if (!in_array($type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'STRING', 'LONG', 'DOUBLE', 'DATE', 'INTEGER', 'BOOLEAN', 'LIST_STRING', 'LIST_LONG', 'LIST_INTEGER', 'LIST_DOUBLE', 'LIST_DATE'");
        }
        $this->type = $type;
        return $this;
    }
    
    /**
     * Gets date_value
     * @return \DateTime
     */
    public function getDateValue()
    {
        return $this->date_value;
    }
  
    /**
     * Sets date_value
     * @param \DateTime $date_value 
     * @return $this
     */
    public function setDateValue($date_value)
    {
        
        $this->date_value = $date_value;
        return $this;
    }
    
    /**
     * Gets long_value
     * @return int
     */
    public function getLongValue()
    {
        return $this->long_value;
    }
  
    /**
     * Sets long_value
     * @param int $long_value 
     * @return $this
     */
    public function setLongValue($long_value)
    {
        
        $this->long_value = $long_value;
        return $this;
    }
    
    /**
     * Gets integer_value
     * @return int
     */
    public function getIntegerValue()
    {
        return $this->integer_value;
    }
  
    /**
     * Sets integer_value
     * @param int $integer_value 
     * @return $this
     */
    public function setIntegerValue($integer_value)
    {
        
        $this->integer_value = $integer_value;
        return $this;
    }
    
    /**
     * Gets boolean_value
     * @return bool
     */
    public function getBooleanValue()
    {
        return $this->boolean_value;
    }
  
    /**
     * Sets boolean_value
     * @param bool $boolean_value 
     * @return $this
     */
    public function setBooleanValue($boolean_value)
    {
        
        $this->boolean_value = $boolean_value;
        return $this;
    }
    
    /**
     * Gets double_value
     * @return double
     */
    public function getDoubleValue()
    {
        return $this->double_value;
    }
  
    /**
     * Sets double_value
     * @param double $double_value 
     * @return $this
     */
    public function setDoubleValue($double_value)
    {
        
        $this->double_value = $double_value;
        return $this;
    }
    
    /**
     * Gets string_value
     * @return string
     */
    public function getStringValue()
    {
        return $this->string_value;
    }
  
    /**
     * Sets string_value
     * @param string $string_value 
     * @return $this
     */
    public function setStringValue($string_value)
    {
        
        $this->string_value = $string_value;
        return $this;
    }
    
    /**
     * Gets date_value_list
     * @return \DateTime[]
     */
    public function getDateValueList()
    {
        return $this->date_value_list;
    }
  
    /**
     * Sets date_value_list
     * @param \DateTime[] $date_value_list 
     * @return $this
     */
    public function setDateValueList($date_value_list)
    {
        
        $this->date_value_list = $date_value_list;
        return $this;
    }
    
    /**
     * Gets long_value_list
     * @return int[]
     */
    public function getLongValueList()
    {
        return $this->long_value_list;
    }
  
    /**
     * Sets long_value_list
     * @param int[] $long_value_list 
     * @return $this
     */
    public function setLongValueList($long_value_list)
    {
        
        $this->long_value_list = $long_value_list;
        return $this;
    }
    
    /**
     * Gets integer_value_list
     * @return int[]
     */
    public function getIntegerValueList()
    {
        return $this->integer_value_list;
    }
  
    /**
     * Sets integer_value_list
     * @param int[] $integer_value_list 
     * @return $this
     */
    public function setIntegerValueList($integer_value_list)
    {
        
        $this->integer_value_list = $integer_value_list;
        return $this;
    }
    
    /**
     * Gets double_value_list
     * @return double[]
     */
    public function getDoubleValueList()
    {
        return $this->double_value_list;
    }
  
    /**
     * Sets double_value_list
     * @param double[] $double_value_list 
     * @return $this
     */
    public function setDoubleValueList($double_value_list)
    {
        
        $this->double_value_list = $double_value_list;
        return $this;
    }
    
    /**
     * Gets string_value_list
     * @return string[]
     */
    public function getStringValueList()
    {
        return $this->string_value_list;
    }
  
    /**
     * Sets string_value_list
     * @param string[] $string_value_list 
     * @return $this
     */
    public function setStringValueList($string_value_list)
    {
        
        $this->string_value_list = $string_value_list;
        return $this;
    }
    
    /**
     * Gets and_criteria
     * @return \Onyx\Client\Model\QueryCriteria[]
     */
    public function getAndCriteria()
    {
        return $this->and_criteria;
    }
  
    /**
     * Sets and_criteria
     * @param \Onyx\Client\Model\QueryCriteria[] $and_criteria 
     * @return $this
     */
    public function setAndCriteria($and_criteria)
    {
        
        $this->and_criteria = $and_criteria;
        return $this;
    }
    
    /**
     * Gets or_criteria
     * @return \Onyx\Client\Model\QueryCriteria[]
     */
    public function getOrCriteria()
    {
        return $this->or_criteria;
    }
  
    /**
     * Sets or_criteria
     * @param \Onyx\Client\Model\QueryCriteria[] $or_criteria 
     * @return $this
     */
    public function setOrCriteria($or_criteria)
    {
        
        $this->or_criteria = $or_criteria;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
